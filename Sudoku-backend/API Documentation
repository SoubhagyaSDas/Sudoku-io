##API Documentation for Backend by Nashrah

## Cell Class

### __init__(self)
**Description:** Initializes a cell with default values.  
**Usage:** `cell = Cell()`  
**Parameters:** None  
**Returns:** None  
**Exceptions:** None  

### GetEntry(self)
**Description:** Retrieves the value of the cell.  
**Usage:** `entry = cell.GetEntry()`  
**Parameters:** None  
**Returns:** The value of the cell.  
**Exceptions:** None  

### SetEntry(self, entry: int)
**Description:** Sets the value of the cell.  
**Usage:** `cell.SetEntry(5)`  
**Parameters:**
- `entry (int)`: The value to be set for the cell.  
**Returns:** None  
**Exceptions:** None  

### GetSolution(self)
**Description:** Retrieves the solution value of the cell.  
**Usage:** `solution = cell.GetSolution()`  
**Parameters:** None  
**Returns:** The solution value of the cell.  
**Exceptions:** None  

### SetSolution(self, answer: int)
**Description:** Sets the solution value of the cell.  
**Usage:** `cell.SetSolution(3)`  
**Parameters:**
- `answer (int)`: The solution value to be set for the cell.  
**Returns:** None  
**Exceptions:** None  

### GetNotes(self)
**Description:** Retrieves the list of notes for the cell.  
**Usage:** `notes = cell.GetNotes()`  
**Parameters:** None  
**Returns:** The list of notes for the cell.  
**Exceptions:** None  

### SetNotes(self, note: int)
**Description:** Appends note to the existing list of notes or removes note if it already exists.  
**Usage:** `cell.SetNotes(7)`  
**Parameters:**
- `note (int)`: The note value the user wants for the given cell.  
**Returns:** None  
**Exceptions:** None  

### GetRow(self)
**Description:** Retrieves the row index of the cell.  
**Usage:** `row = cell.GetRow()`  
**Parameters:** None  
**Returns:** The row index of the cell.  
**Exceptions:** None  

### GetCol(self)
**Description:** Retrieves the column index of the cell.  
**Usage:** `col = cell.GetCol()`  
**Parameters:** None  
**Returns:** The column index of the cell.  
**Exceptions:** None  

### Clear(self)
**Description:** Clears the value of the cell.  
**Usage:** `cell.Clear()`  
**Parameters:** None  
**Returns:** None  
**Exceptions:** None  

### SetGiven(self)
**Description:** Sets the given attribute of the cell to True.  
**Usage:** `cell.SetGiven()`  
**Parameters:** None  
**Returns:** None  
**Exceptions:** None  

## Puzzle Class

### __init__(self)
**Description:** Initializes a Sudoku puzzle with default values.  
**Usage:** `puzzle = Puzzle()`  
**Parameters:** None  
**Returns:** None  
**Exceptions:** None  

### GetBoardSize(self)
**Description:** Retrieves the size of the puzzle board.  
**Usage:** `size = puzzle.GetBoardSize()`  
**Parameters:** None  
**Returns:** The size of the puzzle board.  
**Exceptions:** None  

### SetBoardSize(self, size: int)
**Description:** Sets the size of the puzzle board.  
**Usage:** `puzzle.SetBoardSize(9)`  
**Parameters:**
- `size (int)`: The size of the puzzle board (e.g., 9 representing a 9x9 puzzle).  
**Returns:** None  
**Exceptions:** None  

### GetValue(self, row, col)
**Description:** Retrieves the value of a cell in the puzzle.  
**Usage:** `value = puzzle.GetValue(1, 2)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.  
**Returns:** The value of the specified cell.  
**Exceptions:** None  

### SetCell(self, row, col, value)
**Description:** Sets the value of a cell in the puzzle.  
**Usage:** `puzzle.SetCell(1, 2, 5)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.
- `value (int)`: The value to be set for the cell.  
**Returns:** True if the cell was successfully set, False otherwise.  
**Exceptions:** None  

### GetCell(self, row, col)
**Description:** Retrieves a cell object from the puzzle.  
**Usage:** `cell = puzzle.GetCell(1, 2)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.  
**Returns:** The cell object at the specified position.  
**Exceptions:** None  

### GetNotes(self, row, col)
**Description:** Retrieves the list of notes for a cell in the puzzle.  
**Usage:** `notes = puzzle.GetNotes(1, 2)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.  
**Returns:** The list of notes for the specified cell.  
**Exceptions:** None  

### SetNotes(self, row, col, note)
**Description:** Sets the list of notes for a cell in the puzzle.  
**Usage:** `puzzle.SetNotes(1, 2, 5)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.
- `note (int)`: The note value to be added to the current notes for the cell.  
**Returns:** None  
**Exceptions:** None  

### GetDifficulty(self)
**Description:** Retrieves the difficulty level of the puzzle.  
**Usage:** `difficulty = puzzle.GetDifficulty()`  
**Parameters:** None  
**Returns:** The difficulty level of the puzzle.  
**Exceptions:** None  

### SetDifficulty(self, difficulty)
**Description:** Sets the difficulty level of the puzzle.  
**Usage:** `puzzle.SetDifficulty("Medium")`  
**Parameters:**
- `difficulty (str)`: The difficulty level of the puzzle.  
**Returns:** None  
**Exceptions:** None  

### ResetCell(self, row, col)
**Description:** Clears the value of a cell in the puzzle.  
**Usage:** `puzzle.ResetCell(1, 2)`  
**Parameters:**
- `row (int)`: The row index of the cell.
- `col (int)`: The column index of the cell.  
**Returns:** None  
**Exceptions:** None  
